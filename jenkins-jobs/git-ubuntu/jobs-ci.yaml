# Ubuntu Server QA Jenkins Jobs
# Copyright (C) 2017 Canonical Ltd.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version..
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software Foundation,
# Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA

---
- job:
    name: git-ubuntu-ci-trigger
    defaults: git-ubuntu
    node: metal-amd64
    triggers:
      - timed: H/15 * * * *
    wrappers:
      - workspace-cleanup
      - timeout:
          timeout: 15
          fail: true
    builders:
      - shell: |
          #!/bin/bash -x
          launchpadTrigger --lock-name=${JOB_NAME} \
                           --job=git-ubuntu-ci \
                           --branch=lp:usd-importer \
                           --trigger-ci

- job:
    name: git-ubuntu-ci
    defaults: git-ubuntu
    wrappers:
      - timeout:
          timeout: 120
          fail: true
    parameters:
      - candidate-revision
      - landing-candidate:
          default: lp:cloud-init
          description: Candidate git repo to test (e.g. lp:~smoser/cloud-init)
      - landing-candidate-branch
      - merge-proposal
      - use-description-for-commit
    project-type: pipeline
    auth-token: BUILD_ME
    sandbox: true
    dsl: |
      pipeline {
        agent { label 'metal-amd64' }
        parameters {
            string (
                defaultValue: '',
                description: 'Hash revision of the branch to test (e.g. c6af5b9a1648c208c82b3a2704668391abadd8ab)',
                name : 'candidate_revision')
            string (
                defaultValue: 'lp:usd-importer',
                description: 'Candidate git repo to test (e.g. lp:~smoser/git-ubuntu)',
                name : 'landing_candidate')
            string (
                defaultValue: 'master',
                description: 'Git branch name for testing (e.g. master)',
                name : 'landing_candidate_branch')
            string (
                defaultValue: '',
                description: 'URL of merge proposal to process to test (e.g. https://code.launchpad.net/~smoser/usd-importer/+git/usd-importer/+merge/325760)',
                name : 'merge_proposal')
            booleanParam (
                defaultValue: true,
                description: 'Use or not use the merge proposal description as commit message.',
                name : 'use_description_for_commit')
        }

        environment {
            VM_NAME = "gitubuntu-ci-${currentBuild.getNumber()}"
        }

        stages {
            stage ('VM Setup') {
                steps {
                    deleteDir()
                    git url: 'https://github.com/canonical/server-test-scripts', branch: 'main'
                    sh 'https_proxy=http://squid.internal:3128 ./git-ubuntu/vm_setup "$VM_NAME"'
                }
            }

            stage ('Build') {
                steps {
                    sh "uvt-kvm ssh --insecure $VM_NAME -- no_proxy=launchpad.net git clone --no-tags -b ${params.landing_candidate_branch} ${params.landing_candidate} git-ubuntu"
                    sh 'uvt-kvm ssh --insecure $VM_NAME -- "cd git-ubuntu && no_proxy=launchpad.net git fetch --tags https://git.launchpad.net/usd-importer"'
                    sh 'uvt-kvm ssh --insecure "$VM_NAME" -- "cd git-ubuntu; no_proxy=canonical.com,launchpad.net,launchpadlibrarian.net sh snap.sh"'
                    sh 'scp -oStrictHostKeyChecking=no ubuntu@$(uvt-kvm ip "$VM_NAME"):/home/ubuntu/git-ubuntu/git-ubuntu_*_amd64.snap .'
                }
            }

            stage ('VM Reset') {
                steps {
                    sh 'uvt-kvm destroy "$VM_NAME"'
                    sh 'https_proxy=http://squid.internal:3128 ./git-ubuntu/vm_setup "$VM_NAME"'
                }
            }

            stage ('Unit Tests') {
                steps {
                    sh 'scp -oStrictHostKeyChecking=no git-ubuntu_*_amd64.snap ubuntu@$(uvt-kvm ip "$VM_NAME"):/home/ubuntu/'
                    sh 'uvt-kvm ssh --insecure "$VM_NAME" -- "sudo snap install --dangerous --classic git-ubuntu_*_amd64.snap"'
                    sh 'uvt-kvm ssh --insecure "$VM_NAME" -- "snap list"'
                    sh 'uvt-kvm ssh --insecure "$VM_NAME" -- "bash -l -c git-ubuntu.self-test"'
                }
            }
        }

        post {
            always {
                sh 'uvt-kvm destroy "$VM_NAME"'
                archiveArtifacts artifacts: '*.snap', allowEmptyArchive: true, onlyIfSuccessful: false
                step([$class: 'Mailer', recipients: 'server-crew-qa@lists.canonical.com, robie.basak@canonical.com, bryce.harrington@canonical.com'])
            }

            success {
                build job: 'admin-lp-git-vote',
                parameters: [string(name: 'TEST_RESULT', value: 'PASSED'),
                           string(name: 'TEST_URL', value: env.BUILD_URL),
                           string(name: 'MERGE_BRANCH', value: params.landing_candidate),
                           string(name: 'MERGE_URL', value: params.merge_proposal),
                           string(name: 'MERGE_REVISION', value: params.candidate_revision),
                           ],
                propagate: false
            }

            failure {
                build job: 'admin-lp-git-vote',
                parameters: [string(name: 'TEST_RESULT', value: 'FAILED'),
                           string(name: 'TEST_URL', value: env.BUILD_URL),
                           string(name: 'MERGE_BRANCH', value: params.landing_candidate),
                           string(name: 'MERGE_URL', value: params.merge_proposal),
                           string(name: 'MERGE_REVISION', value: params.candidate_revision),
                           ],
                 propagate: false
            }
        }
      }

- job:
    name: git-ubuntu-ci-nightly
    defaults: git-ubuntu
    parameters:
      - landing-candidate-branch
    project-type: pipeline
    triggers:
      - timed: "H 23 * * *"
    sandbox: true
    dsl: |
      pipeline {
        agent { label 'metal-amd64' }
        options {
            timeout(time: 2, unit: 'HOURS')
        }
        parameters {
            string (
                defaultValue: 'master',
                description: 'Git branch name for testing (e.g. master)',
                name : 'landing_candidate_branch')
        }

        environment {
            VM_NAME = "gitubuntu-ci-nightly-${currentBuild.getNumber()}"
            SNAPCRAFT_LOGIN_FILE = credentials('git-ubuntu-snap-edge-push')
        }

        stages {
            stage ('VM Setup') {
                steps {
                    deleteDir()
                    git url: 'https://github.com/canonical/server-test-scripts', branch: 'main'
                    sh 'https_proxy="http://squid.internal:3128" ./git-ubuntu/vm_setup "$VM_NAME"'
                }
            }

            stage ('Build') {
                steps {
                    sh "uvt-kvm ssh --insecure $VM_NAME -- no_proxy=launchpad.net git clone -b ${params.landing_candidate_branch} https://git.launchpad.net/usd-importer git-ubuntu"
                    sh 'uvt-kvm ssh --insecure "$VM_NAME" -- "cd git-ubuntu; no_proxy=canonical.com,launchpad.net,launchpadlibrarian.net sh snap.sh"'
                    sh 'scp -oStrictHostKeyChecking=no ubuntu@$(uvt-kvm ip "$VM_NAME"):/home/ubuntu/git-ubuntu/git-ubuntu_*_amd64.snap .'
                }
            }

            stage ('VM Reset') {
                steps {
                    sh 'uvt-kvm destroy "$VM_NAME"'
                    sh 'https_proxy=http://squid.internal:3128 ./git-ubuntu/vm_setup "$VM_NAME"'
                }
            }

            stage ('Unit Tests') {
                steps {
                    sh 'scp -oStrictHostKeyChecking=no git-ubuntu_*_amd64.snap ubuntu@$(uvt-kvm ip "$VM_NAME"):/home/ubuntu/'
                    sh 'uvt-kvm ssh --insecure "$VM_NAME" -- "sudo snap install --dangerous --classic git-ubuntu_*_amd64.snap"'
                    sh 'uvt-kvm ssh --insecure "$VM_NAME" -- "snap list"'
                    sh 'uvt-kvm ssh --insecure "$VM_NAME" -- "bash -l -c git-ubuntu.self-test"'
                }
            }

            stage ('Publish') {
                steps {
                    sh 'uvt-kvm ssh --insecure "$VM_NAME" -- "no_proxy=canonical.com,launchpad.net,launchpadlibrarian.net sudo snap install --classic snapcraft"'
                    sh 'scp -oStrictHostKeyChecking=no "$SNAPCRAFT_LOGIN_FILE" ubuntu@$(uvt-kvm ip "$VM_NAME"):git-ubuntu-snap-edge-push'
                    sh 'uvt-kvm ssh --insecure "$VM_NAME" -- "no_proxy=canonical.com,launchpad.net,ubuntu.com,snapcraft.io snapcraft login --with git-ubuntu-snap-edge-push"'
                    sh 'uvt-kvm ssh --insecure "$VM_NAME" -- "no_proxy=canonical.com,launchpad.net,ubuntu.com,snapcraft.io snapcraft upload --release edge git-ubuntu_*_amd64.snap"'
                }
            }

        }

        post {
            always {
                sh 'uvt-kvm destroy "$VM_NAME"'
                archiveArtifacts artifacts: '*.snap', allowEmptyArchive: true, onlyIfSuccessful: false
                step([$class: 'Mailer', recipients: 'server-crew-qa@lists.canonical.com, robie.basak@canonical.com, bryce.harrington@canonical.com'])
            }
        }
      }
