# Ubuntu Server QA Jenkins Jobs
# Copyright (C) 2017 Canonical Ltd.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version..
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software Foundation,
# Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA

---
- job:
    name: admin-jobs-update
    defaults: admin
    triggers:
      - timed: "*/15 * * * *"
    parameters:
      - bool:
          name: force_update
          description: Force job updates of all jobs by providing --ignore-cache to 'jenkins-job update' command.
            Useful to clear out config deltas introduced by editing jobs in Jenkins' UI.
          default: false
      - bool:
          name: delete_old
          description: Delete jobs that were jobs once managed by JJB
            (as distinguished by a special comment that JJB appends to their
            description), but were not generated in this JJB run.
      - string:
          name: job_names
          description: Space-separated list of jobs to deploy (empty = all).
      - git-params-server-jenkins-jobs
    wrappers:
      - credentials-binding:
          - text:
              credential-id: server-team-jb-bot-password
              variable: JJB_PASSWORD
    publishers:
      - email:
          recipients: server-crew-qa@lists.canonical.com
    builders:
      - shell: |
          #!/bin/bash

          set -ux -o pipefail

          export JJB_USER=server-team-jb-bot

          # Setup a venv and install JJB, reuse the venv if already existing.
          # Avoid leaving a broken venv behind is something goes wrong here.
          trap 'rm -rf job-venv' EXIT
          [[ -d job-venv ]] || python3 -m venv job-venv || exit 1
          . job-venv/bin/activate
          [[ $VIRTUAL_ENV == $(realpath job-venv) ]] || exit 1
          pip install --upgrade pip
          pip install --upgrade jenkins-job-builder==3.2.0 || exit 1
          [[ $(command -v jenkins-jobs) == $(realpath job-venv)* ]] || exit 1
          trap - EXIT

          jenkins-jobs --version

          rm -rf server-jenkins-jobs
          git clone --depth 1 -b "$SJJBRANCH" "$SJJREPO" server-jenkins-jobs || exit 1
          cd server-jenkins-jobs || exit 1

          # Do not attempt a deploy if the jobs don't test clean
          ./test-jenkins-jobs || exit 1

          jjb_flags=(--conf jenkins_jobs.ini)
          # Jenkins jobs altered via the jenkins configure UI are
          # updated if deltas are observed on 'tip' of source repo.
          # Use --ignore-cache to force update to clear out any deltas
          # added via the jenkins UI even if master doesn't present a delta.
          [[ $force_update == true ]] && jjb_flags+=(--ignore-cache)

          jjb_update_flags=(--recursive)
          [[ $delete_old == true ]] && jjb_update_flags+=(--delete-old)

          # Convert job_names to an array. Allows individual quoting of job names.
          read -r -a job_names <<< "${job_names-}"

          jenkins-jobs "${jjb_flags[@]}" update "${jjb_update_flags[@]}" jenkins-jobs "${job_names[@]}" || exit 1
